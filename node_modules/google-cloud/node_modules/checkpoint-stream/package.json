{
  "_args": [
    [
      {
        "raw": "checkpoint-stream@https://registry.npmjs.org/checkpoint-stream/-/checkpoint-stream-0.1.1.tgz",
        "scope": null,
        "escapedName": "checkpoint-stream",
        "name": "checkpoint-stream",
        "rawSpec": "https://registry.npmjs.org/checkpoint-stream/-/checkpoint-stream-0.1.1.tgz",
        "spec": "https://registry.npmjs.org/checkpoint-stream/-/checkpoint-stream-0.1.1.tgz",
        "type": "remote"
      },
      "C:\\Workspace\\VirtualMarket\\node_modules\\google-cloud"
    ]
  ],
  "_from": "checkpoint-stream@>=0.1.0 <0.2.0",
  "_id": "checkpoint-stream@0.1.1",
  "_inCache": true,
  "_location": "/google-cloud/checkpoint-stream",
  "_phantomChildren": {},
  "_requested": {
    "raw": "checkpoint-stream@https://registry.npmjs.org/checkpoint-stream/-/checkpoint-stream-0.1.1.tgz",
    "scope": null,
    "escapedName": "checkpoint-stream",
    "name": "checkpoint-stream",
    "rawSpec": "https://registry.npmjs.org/checkpoint-stream/-/checkpoint-stream-0.1.1.tgz",
    "spec": "https://registry.npmjs.org/checkpoint-stream/-/checkpoint-stream-0.1.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/google-cloud",
    "/google-cloud/@google-cloud/spanner"
  ],
  "_resolved": "https://registry.npmjs.org/checkpoint-stream/-/checkpoint-stream-0.1.1.tgz",
  "_shasum": "59088511fbe23b6d2c1e82eaf02f28459667f637",
  "_shrinkwrap": null,
  "_spec": "checkpoint-stream@https://registry.npmjs.org/checkpoint-stream/-/checkpoint-stream-0.1.1.tgz",
  "_where": "C:\\Workspace\\VirtualMarket\\node_modules\\google-cloud",
  "author": {
    "name": "Stephen Sawchuk",
    "email": "sawchuk@gmail.com"
  },
  "dependencies": {
    "events-intercept": "^2.0.0",
    "pumpify": "^1.3.5",
    "split-array-stream": "^1.0.0",
    "through2": "^2.0.3"
  },
  "description": "Queue data from a stream until a checkpoint is hit",
  "devDependencies": {
    "async": "^2.1.4",
    "mocha": "^3.2.0",
    "standard": "^8.6.0"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "queue",
    "stream",
    "checkpoint"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "checkpoint-stream",
  "optionalDependencies": {},
  "readme": "# checkpoint-stream\n> Queue data from a stream until a checkpoint is hit\n\n```sh\n$ npm install --save checkpoint-stream\n```\n```js\nvar checkpoint = require('checkpoint-stream')\n\n// getObjectsStream() returns a stream that emits multiple objects\n// this will queue up those objects until we reach a checkpoint\n// once the `isCheckpointFn` test passes, the queue is flushed\n\ngetObjectsStream()\n  .on('error', function() {...})\n  .pipe(checkpoint.obj(function(obj) {\n    return typeof obj.token !== 'undefined'\n  }))\n  .on('checkpoint', function(obj) {\n    // the obj from `getObjectsStream()` that passed the `isCheckpointFn` test\n  })\n  .on('data', function(obj) {\n    // emitted for each object\n  })\n```\n\n### Why would I want this?\n\nSay you're working with a streaming API that returns many results. Anywhere during transmission, the API call could fail. The API knows this, so it periodically returns a token you can use when you retry the request.\n\nWhen you get a result that has that token, that's kind of like a \"checkpoint\". It means, release all the results we've received up until now, because we know we'll be able to pick up from here when we go to retry the request.\n\n## API\n\n### checkpointStream(config)\n\n- Returns `TransformStream` (via [`through2`](http://gitnpm.com/through2))\n\n### checkpointStream.obj(config)\n\n- Returns `TransformStream` (via [`through2`](http://gitnpm.com/through2))\n\n#### config\n\n- **Required**\n- Type: `Object` or `Function`\n\nA configuration object. If a function is provided, it is treated as `config.isCheckpointFn`.\n\n##### config.isCheckpointFn\n\n- **Required**\n- Type: `Function`\n\nThis function will receive each data event that is emitted from the source stream. Return a boolean to indicate if this is a checkpoint or not. If it is a checkpoint, this event, and any previously queued events before it will be passed through to the next stream in your pipeline. If it is not a checkpoint, this event will be queued until you return `true` in a future data event.\n\n##### config.maxQueued\n\n- *Optional*\n- Type: `Number`\n- Default: `10`\n\nConfigure how many results will be queued before they are released, regardless of if a checkpoint has been reached.\n\n##### config.objectMode\n\n- *Optional*\n- Type: `Boolean`\n- Default: `false`\n\nEnable `objectMode` when dealing with streams in object mode.\n",
  "readmeFilename": "readme.md",
  "scripts": {
    "lint": "standard",
    "test": "mocha *.test.js"
  },
  "standard": {
    "global": [
      "after",
      "before",
      "beforeEach",
      "describe",
      "it"
    ]
  },
  "version": "0.1.1"
}
