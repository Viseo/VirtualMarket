{
  "_args": [
    [
      {
        "raw": "retry-request@https://registry.npmjs.org/retry-request/-/retry-request-1.3.2.tgz",
        "scope": null,
        "escapedName": "retry-request",
        "name": "retry-request",
        "rawSpec": "https://registry.npmjs.org/retry-request/-/retry-request-1.3.2.tgz",
        "spec": "https://registry.npmjs.org/retry-request/-/retry-request-1.3.2.tgz",
        "type": "remote"
      },
      "C:\\Workspace\\VirtualMarket\\node_modules\\google-cloud"
    ]
  ],
  "_from": "retry-request@>=1.3.2 <2.0.0",
  "_id": "retry-request@1.3.2",
  "_inCache": true,
  "_location": "/google-cloud/retry-request",
  "_phantomChildren": {
    "aws-sign2": "0.6.0",
    "aws4": "1.6.0",
    "caseless": "0.11.0",
    "combined-stream": "1.0.5",
    "extend": "3.0.0",
    "forever-agent": "0.6.1",
    "form-data": "2.1.2",
    "har-validator": "2.0.6",
    "hawk": "3.1.3",
    "http-signature": "1.1.1",
    "is-typedarray": "1.0.0",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "mime-types": "2.1.15",
    "node-uuid": "1.4.8",
    "oauth-sign": "0.8.2",
    "qs": "6.3.2",
    "stringstream": "0.0.5",
    "tough-cookie": "2.3.2",
    "tunnel-agent": "0.4.3"
  },
  "_requested": {
    "raw": "retry-request@https://registry.npmjs.org/retry-request/-/retry-request-1.3.2.tgz",
    "scope": null,
    "escapedName": "retry-request",
    "name": "retry-request",
    "rawSpec": "https://registry.npmjs.org/retry-request/-/retry-request-1.3.2.tgz",
    "spec": "https://registry.npmjs.org/retry-request/-/retry-request-1.3.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/google-cloud",
    "/google-cloud/@google-cloud/common",
    "/google-cloud/@google-cloud/common-grpc",
    "/google-cloud/gcp-metadata"
  ],
  "_resolved": "https://registry.npmjs.org/retry-request/-/retry-request-1.3.2.tgz",
  "_shasum": "59ad24e71f8ae3f312d5f7b4bcf467a5e5a57bd6",
  "_shrinkwrap": null,
  "_spec": "retry-request@https://registry.npmjs.org/retry-request/-/retry-request-1.3.2.tgz",
  "_where": "C:\\Workspace\\VirtualMarket\\node_modules\\google-cloud",
  "author": {
    "name": "Stephen Sawchuk",
    "email": "sawchuk@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/stephenplusplus/retry-request/issues"
  },
  "dependencies": {
    "request": "2.76.0",
    "through2": "^2.0.0"
  },
  "description": "Retry a request.",
  "devDependencies": {
    "mocha": "^2.2.5"
  },
  "engines": {
    "node": ">=0.12"
  },
  "files": [
    "index.js",
    "license"
  ],
  "homepage": "https://github.com/stephenplusplus/retry-request#readme",
  "keywords": [
    "request",
    "retry",
    "stream"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "retry-request",
  "optionalDependencies": {},
  "readme": "|![retry-request](logo.png)\n|:-:\n|Retry a [request][request] with built-in [exponential backoff](https://developers.google.com/analytics/devguides/reporting/core/v3/coreErrors#backoff).\n\n```sh\n$ npm install --save retry-request\n```\n```js\nvar request = require('retry-request');\n```\n\nIt should work the same as `request` in both callback mode and stream mode.\n\nNote: This module only works when used as a readable stream, i.e. POST requests aren't supported  ([#3](https://github.com/stephenplusplus/retry-request/issues/3)).\n\n#### Callback\n\n`urlThatReturns503` will be requested 3 total times before giving up and executing the callback.\n\n```js\nrequest(urlThatReturns503, function (err, resp, body) {});\n```\n\n#### Stream\n\n`urlThatReturns503` will be requested 3 total times before giving up and emitting the `response` and `complete` event as usual.\n\n```js\nrequest(urlThatReturns503)\n  .on('error', function () {})\n  .on('response', function () {})\n  .on('complete', function () {});\n```\n\n## request(requestOptions, [opts], [cb])\n\n### requestOptions\n\nPassed directly to `request`. See the list of options supported: https://github.com/request/request/#requestoptions-callback.\n\n### opts *(optional)*\n\n#### `opts.objectMode`\n\nType: `Boolean`\n\nDefault: `false`\n\nSet to `true` if your custom `opts.request` function returns a stream in object mode.\n\n#### `opts.retries`\n\nType: `Number`\n\nDefault: `2`\n\n```js\nvar opts = {\n  retries: 4\n};\n\nrequest(urlThatReturns503, opts, function (err, resp, body) {\n  // urlThatReturns503 was requested a total of 5 times\n  // before giving up and executing this callback.\n});\n```\n\n#### `opts.shouldRetryFn`\n\nType: `Function`\n\nDefault: Returns `true` if [http.incomingMessage](https://nodejs.org/api/http.html#http_http_incomingmessage).statusCode is < 200 or >= 400.\n\n```js\nvar opts = {\n  shouldRetryFn: function (incomingHttpMessage) {\n    return incomingHttpMessage.statusMessage !== 'OK';\n  }\n};\n\nrequest(urlThatReturnsNonOKStatusMessage, opts, function (err, resp, body) {\n  // urlThatReturnsNonOKStatusMessage was requested a\n  // total of 3 times, each time using `opts.shouldRetryFn`\n  // to decide if it should continue before giving up and\n  // executing this callback.\n});\n```\n\n#### `opts.request`\n\nType: `Function`\n\nDefault: [`request`][request]\n\n*NOTE: If you override the request function, and it returns a stream in object mode, be sure to set `opts.objectMode` to `true`.*\n\n```js\nvar originalRequest = require('request').defaults({\n  pool: {\n    maxSockets: Infinity\n  }\n});\n\nvar opts = {\n  request: originalRequest\n};\n\nrequest(urlThatReturns503, opts, function (err, resp, body) {\n  // Your provided `originalRequest` instance was used.\n});\n```\n\n### cb *(optional)*\n\nPassed directly to `request`. See the callback section: https://github.com/request/request/#requestoptions-callback.\n\n[request]: https://github.com/request/request\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stephenplusplus/retry-request.git"
  },
  "scripts": {
    "test": "mocha --timeout 12000"
  },
  "version": "1.3.2"
}
